#include "CalibrationDataInterface/CalibrationDataInterfaceBase.h"
#include "CalibrationDataInterface/CalibrationDataInterfaceROOT.h"
//
// File generated by /software/opt/lucid/x86_64/root/5.28.00-p39587/bin/rootcint at Fri Feb  3 13:37:30 2012

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIobjdICalibrationDataInterface_Dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "CalibrationDataInterface_Dict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace Analysis {
   namespace ROOT {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void Analysis_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("Analysis", 0 /*version*/, "../CalibrationDataInterface/CalibrationDataInterfaceROOT.h", 21,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &Analysis_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void Analysis_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOT {
   void AnalysiscLcLCalibrationDataInterfaceBase_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_AnalysiscLcLCalibrationDataInterfaceBase(void *p);
   static void deleteArray_AnalysiscLcLCalibrationDataInterfaceBase(void *p);
   static void destruct_AnalysiscLcLCalibrationDataInterfaceBase(void *p);
   static void streamer_AnalysiscLcLCalibrationDataInterfaceBase(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Analysis::CalibrationDataInterfaceBase*)
   {
      ::Analysis::CalibrationDataInterfaceBase *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Analysis::CalibrationDataInterfaceBase >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Analysis::CalibrationDataInterfaceBase", ::Analysis::CalibrationDataInterfaceBase::Class_Version(), "../CalibrationDataInterface/CalibrationDataInterfaceBase.h", 44,
                  typeid(::Analysis::CalibrationDataInterfaceBase), DefineBehavior(ptr, ptr),
                  &::Analysis::CalibrationDataInterfaceBase::Dictionary, isa_proxy, 0,
                  sizeof(::Analysis::CalibrationDataInterfaceBase) );
      instance.SetDelete(&delete_AnalysiscLcLCalibrationDataInterfaceBase);
      instance.SetDeleteArray(&deleteArray_AnalysiscLcLCalibrationDataInterfaceBase);
      instance.SetDestructor(&destruct_AnalysiscLcLCalibrationDataInterfaceBase);
      instance.SetStreamerFunc(&streamer_AnalysiscLcLCalibrationDataInterfaceBase);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Analysis::CalibrationDataInterfaceBase*)
   {
      return GenerateInitInstanceLocal((::Analysis::CalibrationDataInterfaceBase*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Analysis::CalibrationDataInterfaceBase*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void AnalysiscLcLCalibrationDataVariables_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void AnalysiscLcLCalibrationDataVariables_Dictionary();
   static void *new_AnalysiscLcLCalibrationDataVariables(void *p = 0);
   static void *newArray_AnalysiscLcLCalibrationDataVariables(Long_t size, void *p);
   static void delete_AnalysiscLcLCalibrationDataVariables(void *p);
   static void deleteArray_AnalysiscLcLCalibrationDataVariables(void *p);
   static void destruct_AnalysiscLcLCalibrationDataVariables(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Analysis::CalibrationDataVariables*)
   {
      ::Analysis::CalibrationDataVariables *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Analysis::CalibrationDataVariables),0);
      static ::ROOT::TGenericClassInfo 
         instance("Analysis::CalibrationDataVariables", "../CalibrationDataInterface/CalibrationDataInterfaceROOT.h", 60,
                  typeid(::Analysis::CalibrationDataVariables), DefineBehavior(ptr, ptr),
                  0, &AnalysiscLcLCalibrationDataVariables_Dictionary, isa_proxy, 0,
                  sizeof(::Analysis::CalibrationDataVariables) );
      instance.SetNew(&new_AnalysiscLcLCalibrationDataVariables);
      instance.SetNewArray(&newArray_AnalysiscLcLCalibrationDataVariables);
      instance.SetDelete(&delete_AnalysiscLcLCalibrationDataVariables);
      instance.SetDeleteArray(&deleteArray_AnalysiscLcLCalibrationDataVariables);
      instance.SetDestructor(&destruct_AnalysiscLcLCalibrationDataVariables);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Analysis::CalibrationDataVariables*)
   {
      return GenerateInitInstanceLocal((::Analysis::CalibrationDataVariables*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Analysis::CalibrationDataVariables*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void AnalysiscLcLCalibrationDataVariables_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataVariables*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void AnalysiscLcLCalibrationDataInterfaceROOT_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AnalysiscLcLCalibrationDataInterfaceROOT(void *p = 0);
   static void *newArray_AnalysiscLcLCalibrationDataInterfaceROOT(Long_t size, void *p);
   static void delete_AnalysiscLcLCalibrationDataInterfaceROOT(void *p);
   static void deleteArray_AnalysiscLcLCalibrationDataInterfaceROOT(void *p);
   static void destruct_AnalysiscLcLCalibrationDataInterfaceROOT(void *p);
   static void streamer_AnalysiscLcLCalibrationDataInterfaceROOT(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Analysis::CalibrationDataInterfaceROOT*)
   {
      ::Analysis::CalibrationDataInterfaceROOT *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Analysis::CalibrationDataInterfaceROOT >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Analysis::CalibrationDataInterfaceROOT", ::Analysis::CalibrationDataInterfaceROOT::Class_Version(), "../CalibrationDataInterface/CalibrationDataInterfaceROOT.h", 69,
                  typeid(::Analysis::CalibrationDataInterfaceROOT), DefineBehavior(ptr, ptr),
                  &::Analysis::CalibrationDataInterfaceROOT::Dictionary, isa_proxy, 0,
                  sizeof(::Analysis::CalibrationDataInterfaceROOT) );
      instance.SetNew(&new_AnalysiscLcLCalibrationDataInterfaceROOT);
      instance.SetNewArray(&newArray_AnalysiscLcLCalibrationDataInterfaceROOT);
      instance.SetDelete(&delete_AnalysiscLcLCalibrationDataInterfaceROOT);
      instance.SetDeleteArray(&deleteArray_AnalysiscLcLCalibrationDataInterfaceROOT);
      instance.SetDestructor(&destruct_AnalysiscLcLCalibrationDataInterfaceROOT);
      instance.SetStreamerFunc(&streamer_AnalysiscLcLCalibrationDataInterfaceROOT);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Analysis::CalibrationDataInterfaceROOT*)
   {
      return GenerateInitInstanceLocal((::Analysis::CalibrationDataInterfaceROOT*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Analysis::CalibrationDataInterfaceROOT*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

      namespace Analysis {
//______________________________________________________________________________
TClass *CalibrationDataInterfaceBase::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *CalibrationDataInterfaceBase::Class_Name()
{
   return "Analysis::CalibrationDataInterfaceBase";
}

//______________________________________________________________________________
const char *CalibrationDataInterfaceBase::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataInterfaceBase*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CalibrationDataInterfaceBase::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataInterfaceBase*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CalibrationDataInterfaceBase::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataInterfaceBase*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CalibrationDataInterfaceBase::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataInterfaceBase*)0x0)->GetClass();
   return fgIsA;
}

} // namespace Analysis
      namespace Analysis {
//______________________________________________________________________________
TClass *CalibrationDataInterfaceROOT::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *CalibrationDataInterfaceROOT::Class_Name()
{
   return "Analysis::CalibrationDataInterfaceROOT";
}

//______________________________________________________________________________
const char *CalibrationDataInterfaceROOT::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataInterfaceROOT*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CalibrationDataInterfaceROOT::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataInterfaceROOT*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CalibrationDataInterfaceROOT::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataInterfaceROOT*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CalibrationDataInterfaceROOT::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Analysis::CalibrationDataInterfaceROOT*)0x0)->GetClass();
   return fgIsA;
}

} // namespace Analysis
      namespace Analysis {
//______________________________________________________________________________
void CalibrationDataInterfaceBase::Streamer(TBuffer &R__b)
{
   // Stream an object of class Analysis::CalibrationDataInterfaceBase.

   //This works around a msvc bug and should be harmless on other platforms
   typedef ::Analysis::CalibrationDataInterfaceBase thisClass;
   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      {
         map<std::string,std::vector<int> > &R__stl =  m_functionArguments;
         R__stl.clear();
         TClass *R__tcl2 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl2==0) {
            Error("m_functionArguments streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            string R__t;
            {TString R__str;
             R__str.Streamer(R__b);
             R__t = R__str.Data();}
            vector<int,allocator<int> > R__t2;
            R__b.StreamObject(&R__t2,R__tcl2);
            typedef string Value_t;
            std::pair<Value_t const, vector<int,allocator<int> > > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<std::string,std::string> &R__stl =  m_calibrationEffNames;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            string R__t;
            {TString R__str;
             R__str.Streamer(R__b);
             R__t = R__str.Data();}
            string R__t2;
            {TString R__str;
             R__str.Streamer(R__b);
             R__t2 = R__str.Data();}
            typedef string Value_t;
            std::pair<Value_t const, string > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<std::string,std::string> &R__stl =  m_calibrationSFNames;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            string R__t;
            {TString R__str;
             R__str.Streamer(R__b);
             R__t = R__str.Data();}
            string R__t2;
            {TString R__str;
             R__str.Streamer(R__b);
             R__t2 = R__str.Data();}
            typedef string Value_t;
            std::pair<Value_t const, string > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      { TString R__str; R__str.Streamer(R__b); m_taggerName = R__str.Data(); }
      {
         vector<std::string> &R__stl =  m_operatingPoints;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            string R__t;
            {TString R__str;
             R__str.Streamer(R__b);
             R__t = R__str.Data();}
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, thisClass::IsA());
   } else {
      R__c = R__b.WriteVersion(thisClass::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      {
         map<std::string,std::vector<int> > &R__stl =  m_functionArguments;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl2 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl2==0) {
            Error("m_functionArgumentsstreamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            map<std::string,std::vector<int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            {TString R__str(((*R__k).first ).c_str());
             R__str.Streamer(R__b);};
            R__b.StreamObject((vector<int,allocator<int> >*)&((*R__k).second),R__tcl2);
            }
         }
      }
      {
         map<std::string,std::string> &R__stl =  m_calibrationEffNames;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<std::string,std::string>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            {TString R__str(((*R__k).first ).c_str());
             R__str.Streamer(R__b);};
            {TString R__str(((*R__k).second).c_str());
             R__str.Streamer(R__b);};
            }
         }
      }
      {
         map<std::string,std::string> &R__stl =  m_calibrationSFNames;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<std::string,std::string>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            {TString R__str(((*R__k).first ).c_str());
             R__str.Streamer(R__b);};
            {TString R__str(((*R__k).second).c_str());
             R__str.Streamer(R__b);};
            }
         }
      }
      { TString R__str = m_taggerName.c_str(); R__str.Streamer(R__b);}
      {
         vector<std::string> &R__stl =  m_operatingPoints;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<std::string>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            {TString R__str((*R__k).c_str());
             R__str.Streamer(R__b);};
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

} // namespace Analysis
//______________________________________________________________________________
      namespace Analysis {
void CalibrationDataInterfaceBase::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Analysis::CalibrationDataInterfaceBase.
      TClass *R__cl = ::Analysis::CalibrationDataInterfaceBase::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_functionArguments", (void*)&m_functionArguments);
      R__insp.InspectMember("map<std::string,std::vector<int> >", (void*)&m_functionArguments, "m_functionArguments.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_calibrationEffNames", (void*)&m_calibrationEffNames);
      R__insp.InspectMember("map<std::string,std::string>", (void*)&m_calibrationEffNames, "m_calibrationEffNames.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_calibrationSFNames", (void*)&m_calibrationSFNames);
      R__insp.InspectMember("map<std::string,std::string>", (void*)&m_calibrationSFNames, "m_calibrationSFNames.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_taggerName", (void*)&m_taggerName);
      R__insp.InspectMember("string", (void*)&m_taggerName, "m_taggerName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_operatingPoints", (void*)&m_operatingPoints);
      R__insp.InspectMember("vector<std::string>", (void*)&m_operatingPoints, "m_operatingPoints.", false);
      TNamed::ShowMembers(R__insp);
}

} // namespace Analysis
namespace ROOT {
   // Wrapper around operator delete
   static void delete_AnalysiscLcLCalibrationDataInterfaceBase(void *p) {
      delete ((::Analysis::CalibrationDataInterfaceBase*)p);
   }
   static void deleteArray_AnalysiscLcLCalibrationDataInterfaceBase(void *p) {
      delete [] ((::Analysis::CalibrationDataInterfaceBase*)p);
   }
   static void destruct_AnalysiscLcLCalibrationDataInterfaceBase(void *p) {
      typedef ::Analysis::CalibrationDataInterfaceBase current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_AnalysiscLcLCalibrationDataInterfaceBase(TBuffer &buf, void *obj) {
      ((::Analysis::CalibrationDataInterfaceBase*)obj)->::Analysis::CalibrationDataInterfaceBase::Streamer(buf);
   }
} // end of namespace ROOT for class ::Analysis::CalibrationDataInterfaceBase

      namespace Analysis {
//______________________________________________________________________________
void CalibrationDataInterfaceROOT::Streamer(TBuffer &R__b)
{
   // Stream an object of class Analysis::CalibrationDataInterfaceROOT.

   //This works around a msvc bug and should be harmless on other platforms
   typedef ::Analysis::CalibrationDataInterfaceROOT thisClass;
   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      //This works around a msvc bug and should be harmless on other platforms
      typedef Analysis::CalibrationDataInterfaceBase baseClass0;
      baseClass0::Streamer(R__b);
      {
         map<std::string,std::string> &R__stl =  m_aliases;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            string R__t;
            {TString R__str;
             R__str.Streamer(R__b);
             R__t = R__str.Data();}
            string R__t2;
            {TString R__str;
             R__str.Streamer(R__b);
             R__t2 = R__str.Data();}
            typedef string Value_t;
            std::pair<Value_t const, string > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<std::string,TObject*> &R__stl =  m_objects;
         R__stl.clear();
         TClass *R__tcl2 = TBuffer::GetClass(typeid(TObject));
         if (R__tcl2==0) {
            Error("m_objects streamer","Missing the TClass object for TObject!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            string R__t;
            {TString R__str;
             R__str.Streamer(R__b);
             R__t = R__str.Data();}
            TObject* R__t2;
            R__t2 = (TObject*)R__b.ReadObjectAny(R__tcl2);
            typedef string Value_t;
            std::pair<Value_t const, TObject* > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      R__b.CheckByteCount(R__s, R__c, thisClass::IsA());
   } else {
      R__c = R__b.WriteVersion(thisClass::IsA(), kTRUE);
      //This works around a msvc bug and should be harmless on other platforms
      typedef Analysis::CalibrationDataInterfaceBase baseClass0;
      baseClass0::Streamer(R__b);
      {
         map<std::string,std::string> &R__stl =  m_aliases;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<std::string,std::string>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            {TString R__str(((*R__k).first ).c_str());
             R__str.Streamer(R__b);};
            {TString R__str(((*R__k).second).c_str());
             R__str.Streamer(R__b);};
            }
         }
      }
      {
         map<std::string,TObject*> &R__stl =  m_objects;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<std::string,TObject*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            {TString R__str(((*R__k).first ).c_str());
             R__str.Streamer(R__b);};
            R__b << ((*R__k).second);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

} // namespace Analysis
//______________________________________________________________________________
      namespace Analysis {
void CalibrationDataInterfaceROOT::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Analysis::CalibrationDataInterfaceROOT.
      TClass *R__cl = ::Analysis::CalibrationDataInterfaceROOT::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_fileEff", &m_fileEff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_fileSF", &m_fileSF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_aliases", (void*)&m_aliases);
      R__insp.InspectMember("map<std::string,std::string>", (void*)&m_aliases, "m_aliases.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_objects", (void*)&m_objects);
      R__insp.InspectMember("map<std::string,TObject*>", (void*)&m_objects, "m_objects.", false);
      //This works around a msvc bug and should be harmless on other platforms
      typedef Analysis::CalibrationDataInterfaceBase baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace Analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_AnalysiscLcLCalibrationDataInterfaceROOT(void *p) {
      return  p ? new(p) ::Analysis::CalibrationDataInterfaceROOT : new ::Analysis::CalibrationDataInterfaceROOT;
   }
   static void *newArray_AnalysiscLcLCalibrationDataInterfaceROOT(Long_t nElements, void *p) {
      return p ? new(p) ::Analysis::CalibrationDataInterfaceROOT[nElements] : new ::Analysis::CalibrationDataInterfaceROOT[nElements];
   }
   // Wrapper around operator delete
   static void delete_AnalysiscLcLCalibrationDataInterfaceROOT(void *p) {
      delete ((::Analysis::CalibrationDataInterfaceROOT*)p);
   }
   static void deleteArray_AnalysiscLcLCalibrationDataInterfaceROOT(void *p) {
      delete [] ((::Analysis::CalibrationDataInterfaceROOT*)p);
   }
   static void destruct_AnalysiscLcLCalibrationDataInterfaceROOT(void *p) {
      typedef ::Analysis::CalibrationDataInterfaceROOT current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_AnalysiscLcLCalibrationDataInterfaceROOT(TBuffer &buf, void *obj) {
      ((::Analysis::CalibrationDataInterfaceROOT*)obj)->::Analysis::CalibrationDataInterfaceROOT::Streamer(buf);
   }
} // end of namespace ROOT for class ::Analysis::CalibrationDataInterfaceROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_AnalysiscLcLCalibrationDataVariables(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Analysis::CalibrationDataVariables : new ::Analysis::CalibrationDataVariables;
   }
   static void *newArray_AnalysiscLcLCalibrationDataVariables(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Analysis::CalibrationDataVariables[nElements] : new ::Analysis::CalibrationDataVariables[nElements];
   }
   // Wrapper around operator delete
   static void delete_AnalysiscLcLCalibrationDataVariables(void *p) {
      delete ((::Analysis::CalibrationDataVariables*)p);
   }
   static void deleteArray_AnalysiscLcLCalibrationDataVariables(void *p) {
      delete [] ((::Analysis::CalibrationDataVariables*)p);
   }
   static void destruct_AnalysiscLcLCalibrationDataVariables(void *p) {
      typedef ::Analysis::CalibrationDataVariables current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Analysis::CalibrationDataVariables

namespace ROOT {
   void maplEstringcOTObjectmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOTObjectmUgR_Dictionary();
   static void *new_maplEstringcOTObjectmUgR(void *p = 0);
   static void *newArray_maplEstringcOTObjectmUgR(Long_t size, void *p);
   static void delete_maplEstringcOTObjectmUgR(void *p);
   static void deleteArray_maplEstringcOTObjectmUgR(void *p);
   static void destruct_maplEstringcOTObjectmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,TObject*>*)
   {
      map<string,TObject*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,TObject*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,TObject*>", -2, "/software/opt/lucid/x86_64/root/5.28.00-p39587/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<string,TObject*>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOTObjectmUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,TObject*>) );
      instance.SetNew(&new_maplEstringcOTObjectmUgR);
      instance.SetNewArray(&newArray_maplEstringcOTObjectmUgR);
      instance.SetDelete(&delete_maplEstringcOTObjectmUgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOTObjectmUgR);
      instance.SetDestructor(&destruct_maplEstringcOTObjectmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,TObject*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,TObject*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOTObjectmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,TObject*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOTObjectmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,TObject*> : new map<string,TObject*>;
   }
   static void *newArray_maplEstringcOTObjectmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,TObject*>[nElements] : new map<string,TObject*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOTObjectmUgR(void *p) {
      delete ((map<string,TObject*>*)p);
   }
   static void deleteArray_maplEstringcOTObjectmUgR(void *p) {
      delete [] ((map<string,TObject*>*)p);
   }
   static void destruct_maplEstringcOTObjectmUgR(void *p) {
      typedef map<string,TObject*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,TObject*>

namespace ROOT {
   void maplEstringcOstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOstringgR_Dictionary();
   static void *new_maplEstringcOstringgR(void *p = 0);
   static void *newArray_maplEstringcOstringgR(Long_t size, void *p);
   static void delete_maplEstringcOstringgR(void *p);
   static void deleteArray_maplEstringcOstringgR(void *p);
   static void destruct_maplEstringcOstringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,string>*)
   {
      map<string,string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,string>", -2, "/software/opt/lucid/x86_64/root/5.28.00-p39587/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<string,string>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOstringgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,string>) );
      instance.SetNew(&new_maplEstringcOstringgR);
      instance.SetNewArray(&newArray_maplEstringcOstringgR);
      instance.SetDelete(&delete_maplEstringcOstringgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOstringgR);
      instance.SetDestructor(&destruct_maplEstringcOstringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOstringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,string>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,string> : new map<string,string>;
   }
   static void *newArray_maplEstringcOstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,string>[nElements] : new map<string,string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOstringgR(void *p) {
      delete ((map<string,string>*)p);
   }
   static void deleteArray_maplEstringcOstringgR(void *p) {
      delete [] ((map<string,string>*)p);
   }
   static void destruct_maplEstringcOstringgR(void *p) {
      typedef map<string,string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,string>

namespace ROOT {
   void maplEstringcOvectorlEintgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOvectorlEintgRsPgR_Dictionary();
   static void *new_maplEstringcOvectorlEintgRsPgR(void *p = 0);
   static void *newArray_maplEstringcOvectorlEintgRsPgR(Long_t size, void *p);
   static void delete_maplEstringcOvectorlEintgRsPgR(void *p);
   static void deleteArray_maplEstringcOvectorlEintgRsPgR(void *p);
   static void destruct_maplEstringcOvectorlEintgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,vector<int> >*)
   {
      map<string,vector<int> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,vector<int> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,vector<int> >", -2, "/software/opt/lucid/x86_64/root/5.28.00-p39587/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<string,vector<int> >), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOvectorlEintgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,vector<int> >) );
      instance.SetNew(&new_maplEstringcOvectorlEintgRsPgR);
      instance.SetNewArray(&newArray_maplEstringcOvectorlEintgRsPgR);
      instance.SetDelete(&delete_maplEstringcOvectorlEintgRsPgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOvectorlEintgRsPgR);
      instance.SetDestructor(&destruct_maplEstringcOvectorlEintgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,vector<int> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,vector<int> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOvectorlEintgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,vector<int> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOvectorlEintgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<int> > : new map<string,vector<int> >;
   }
   static void *newArray_maplEstringcOvectorlEintgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<int> >[nElements] : new map<string,vector<int> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOvectorlEintgRsPgR(void *p) {
      delete ((map<string,vector<int> >*)p);
   }
   static void deleteArray_maplEstringcOvectorlEintgRsPgR(void *p) {
      delete [] ((map<string,vector<int> >*)p);
   }
   static void destruct_maplEstringcOvectorlEintgRsPgR(void *p) {
      typedef map<string,vector<int> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,vector<int> >

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "/software/opt/lucid/x86_64/root/5.28.00-p39587/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

namespace ROOT {
   void vectorlEstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEstringgR_Dictionary();
   static void *new_vectorlEstringgR(void *p = 0);
   static void *newArray_vectorlEstringgR(Long_t size, void *p);
   static void delete_vectorlEstringgR(void *p);
   static void deleteArray_vectorlEstringgR(void *p);
   static void destruct_vectorlEstringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<string>*)
   {
      vector<string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<string>", -2, "/software/opt/lucid/x86_64/root/5.28.00-p39587/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<string>), DefineBehavior(ptr, ptr),
                  0, &vectorlEstringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<string>) );
      instance.SetNew(&new_vectorlEstringgR);
      instance.SetNewArray(&newArray_vectorlEstringgR);
      instance.SetDelete(&delete_vectorlEstringgR);
      instance.SetDeleteArray(&deleteArray_vectorlEstringgR);
      instance.SetDestructor(&destruct_vectorlEstringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEstringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<string>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string> : new vector<string>;
   }
   static void *newArray_vectorlEstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string>[nElements] : new vector<string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEstringgR(void *p) {
      delete ((vector<string>*)p);
   }
   static void deleteArray_vectorlEstringgR(void *p) {
      delete [] ((vector<string>*)p);
   }
   static void destruct_vectorlEstringgR(void *p) {
      typedef vector<string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<string>

/********************************************************
* ../obj/CalibrationDataInterface_Dict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableCalibrationDataInterface_Dict();

extern "C" void G__set_cpp_environmentCalibrationDataInterface_Dict() {
  G__cpp_reset_tagtableCalibrationDataInterface_Dict();
}
#include <new>
extern "C" int G__cpp_dllrevCalibrationDataInterface_Dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Analysis */

/* Analysis::CalibrationDataInterfaceBase */
static int G__CalibrationDataInterface_Dict_442_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const Analysis::CalibrationDataInterfaceBase*) G__getstructoffset())->EffCalibrationName(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_442_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataInterfaceBase*) G__getstructoffset())->setEffCalibrationNames(*(map<std::string,std::string>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_442_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const Analysis::CalibrationDataInterfaceBase*) G__getstructoffset())->SFCalibrationName(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_442_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataInterfaceBase*) G__getstructoffset())->setSFCalibrationNames(*(map<std::string,std::string>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_442_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int>& obj = ((const Analysis::CalibrationDataInterfaceBase*) G__getstructoffset())->functionArguments(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_442_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Analysis::CalibrationDataInterfaceBase*) G__getstructoffset())->existFunctionArguments(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_442_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Analysis::CalibrationDataInterfaceBase::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_442_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataInterfaceBase::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_442_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Analysis::CalibrationDataInterfaceBase::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_442_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Analysis::CalibrationDataInterfaceBase::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_442_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataInterfaceBase*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_442_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataInterfaceBase::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_442_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Analysis::CalibrationDataInterfaceBase::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_442_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataInterfaceBase::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_442_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Analysis::CalibrationDataInterfaceBase::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Analysis::CalibrationDataInterfaceBase G__TAnalysiscLcLCalibrationDataInterfaceBase;
static int G__CalibrationDataInterface_Dict_442_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Analysis::CalibrationDataInterfaceBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Analysis::CalibrationDataInterfaceBase*) (soff+(sizeof(Analysis::CalibrationDataInterfaceBase)*i)))->~G__TAnalysiscLcLCalibrationDataInterfaceBase();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Analysis::CalibrationDataInterfaceBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Analysis::CalibrationDataInterfaceBase*) (soff))->~G__TAnalysiscLcLCalibrationDataInterfaceBase();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CalibrationDataInterface_Dict_442_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Analysis::CalibrationDataInterfaceBase* dest = (Analysis::CalibrationDataInterfaceBase*) G__getstructoffset();
   *dest = *(Analysis::CalibrationDataInterfaceBase*) libp->para[0].ref;
   const Analysis::CalibrationDataInterfaceBase& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Analysis::CalibrationDataVariables */
// automatic default constructor
static int G__CalibrationDataInterface_Dict_467_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Analysis::CalibrationDataVariables *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Analysis::CalibrationDataVariables[n];
     } else {
       p = new((void*) gvp) Analysis::CalibrationDataVariables[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Analysis::CalibrationDataVariables;
     } else {
       p = new((void*) gvp) Analysis::CalibrationDataVariables;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataVariables));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CalibrationDataInterface_Dict_467_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Analysis::CalibrationDataVariables* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Analysis::CalibrationDataVariables(*(Analysis::CalibrationDataVariables*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataVariables));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Analysis::CalibrationDataVariables G__TAnalysiscLcLCalibrationDataVariables;
static int G__CalibrationDataInterface_Dict_467_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Analysis::CalibrationDataVariables*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Analysis::CalibrationDataVariables*) (soff+(sizeof(Analysis::CalibrationDataVariables)*i)))->~G__TAnalysiscLcLCalibrationDataVariables();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Analysis::CalibrationDataVariables*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Analysis::CalibrationDataVariables*) (soff))->~G__TAnalysiscLcLCalibrationDataVariables();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CalibrationDataInterface_Dict_467_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Analysis::CalibrationDataVariables* dest = (Analysis::CalibrationDataVariables*) G__getstructoffset();
   *dest = *(Analysis::CalibrationDataVariables*) libp->para[0].ref;
   const Analysis::CalibrationDataVariables& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Analysis::CalibrationDataInterfaceROOT */
static int G__CalibrationDataInterface_Dict_469_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Analysis::CalibrationDataInterfaceROOT* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Analysis::CalibrationDataInterfaceROOT(
*(string*) libp->para[0].ref, *((string*) G__int(libp->para[1]))
, *((string*) G__int(libp->para[2])));
     } else {
       p = new((void*) gvp) Analysis::CalibrationDataInterfaceROOT(
*(string*) libp->para[0].ref, *((string*) G__int(libp->para[1]))
, *((string*) G__int(libp->para[2])));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Analysis::CalibrationDataInterfaceROOT(*(string*) libp->para[0].ref, *((string*) G__int(libp->para[1])));
     } else {
       p = new((void*) gvp) Analysis::CalibrationDataInterfaceROOT(*(string*) libp->para[0].ref, *((string*) G__int(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Analysis::CalibrationDataInterfaceROOT(*(string*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) Analysis::CalibrationDataInterfaceROOT(*(string*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_469_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Analysis::CalibrationDataInterfaceROOT* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Analysis::CalibrationDataInterfaceROOT[n];
     } else {
       p = new((void*) gvp) Analysis::CalibrationDataInterfaceROOT[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Analysis::CalibrationDataInterfaceROOT;
     } else {
       p = new((void*) gvp) Analysis::CalibrationDataInterfaceROOT;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_469_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getEfficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, (Analysis::Uncertainty) G__int(libp->para[3]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getEfficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref);
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_469_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getMCEfficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, (Analysis::Uncertainty) G__int(libp->para[3]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getMCEfficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref);
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_469_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getScaleFactor(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, (Analysis::Uncertainty) G__int(libp->para[3]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getScaleFactor(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref);
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_469_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getInefficiencyScaleFactor(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, (Analysis::Uncertainty) G__int(libp->para[3]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getInefficiencyScaleFactor(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref);
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_469_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getInefficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, (Analysis::Uncertainty) G__int(libp->para[3]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getInefficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref);
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_469_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getMCInefficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref, (Analysis::Uncertainty) G__int(libp->para[3]));
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         const Analysis::CalibResult* pobj;
         const Analysis::CalibResult xobj = ((const Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->getMCInefficiency(*(Analysis::CalibrationDataVariables*) libp->para[0].ref, *(string*) libp->para[1].ref
, *(string*) libp->para[2].ref);
         pobj = new Analysis::CalibResult(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_469_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->initialize(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref
, (Analysis::Uncertainty) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_469_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Analysis::CalibrationDataInterfaceROOT::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_469_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataInterfaceROOT::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_469_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Analysis::CalibrationDataInterfaceROOT::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_469_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Analysis::CalibrationDataInterfaceROOT::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_469_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_469_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataInterfaceROOT::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_469_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Analysis::CalibrationDataInterfaceROOT::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_469_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Analysis::CalibrationDataInterfaceROOT::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibrationDataInterface_Dict_469_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Analysis::CalibrationDataInterfaceROOT::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CalibrationDataInterface_Dict_469_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Analysis::CalibrationDataInterfaceROOT* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Analysis::CalibrationDataInterfaceROOT(*(Analysis::CalibrationDataInterfaceROOT*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Analysis::CalibrationDataInterfaceROOT G__TAnalysiscLcLCalibrationDataInterfaceROOT;
static int G__CalibrationDataInterface_Dict_469_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Analysis::CalibrationDataInterfaceROOT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Analysis::CalibrationDataInterfaceROOT*) (soff+(sizeof(Analysis::CalibrationDataInterfaceROOT)*i)))->~G__TAnalysiscLcLCalibrationDataInterfaceROOT();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Analysis::CalibrationDataInterfaceROOT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Analysis::CalibrationDataInterfaceROOT*) (soff))->~G__TAnalysiscLcLCalibrationDataInterfaceROOT();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CalibrationDataInterface_Dict_469_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Analysis::CalibrationDataInterfaceROOT* dest = (Analysis::CalibrationDataInterfaceROOT*) G__getstructoffset();
   *dest = *(Analysis::CalibrationDataInterfaceROOT*) libp->para[0].ref;
   const Analysis::CalibrationDataInterfaceROOT& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Analysis */

/* Analysis::CalibrationDataInterfaceBase */

/* Analysis::CalibrationDataVariables */

/* Analysis::CalibrationDataInterfaceROOT */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncCalibrationDataInterface_Dict {
 public:
  G__Sizep2memfuncCalibrationDataInterface_Dict(): p(&G__Sizep2memfuncCalibrationDataInterface_Dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncCalibrationDataInterface_Dict::*p)();
};

size_t G__get_sizep2memfuncCalibrationDataInterface_Dict()
{
  G__Sizep2memfuncCalibrationDataInterface_Dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceCalibrationDataInterface_Dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBase))) {
     Analysis::CalibrationDataInterfaceBase *G__Lderived;
     G__Lderived=(Analysis::CalibrationDataInterfaceBase*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBase),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBase),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT))) {
     Analysis::CalibrationDataInterfaceROOT *G__Lderived;
     G__Lderived=(Analysis::CalibrationDataInterfaceROOT*)0x1000;
     {
       Analysis::CalibrationDataInterfaceBase *G__Lpbase=(Analysis::CalibrationDataInterfaceBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT),G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableCalibrationDataInterface_Dict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSym<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTSymlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("CalibResult",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_Analysis));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::string>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string,less<string> >",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<int> >",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<int,allocator<int> >,less<string> >",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObject*>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOTObjectmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjectmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObject*>",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOTObjectmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjectmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObject*,less<string> >",117,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOTObjectmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjectmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Analysis */
static void G__setup_memvarAnalysis(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_Analysis));
   {
   G__memvar_setup((void*)(&Analysis::CalibZERO),100,0,1,-1,-1,-1,1,"CalibZERO=",0,(char*)NULL);
   G__memvar_setup((void*)(&Analysis::dummyValue),100,0,1,-1,-1,-1,1,"dummyValue=",0,(char*)NULL);
   G__memvar_setup((void*)(&Analysis::dummyResult),117,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR),G__defined_typename("CalibResult"),-1,1,"dummyResult=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLUncertainty),-1,-2,1,G__FastAllocString(2048).Format("None=%lldLL",(long long)Analysis::None).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLUncertainty),-1,-2,1,G__FastAllocString(2048).Format("Total=%lldLL",(long long)Analysis::Total).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLUncertainty),-1,-2,1,G__FastAllocString(2048).Format("Statistical=%lldLL",(long long)Analysis::Statistical).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLUncertainty),-1,-2,1,G__FastAllocString(2048).Format("Systematic=%lldLL",(long long)Analysis::Systematic).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Analysis::CalibrationDataInterfaceBase */
static void G__setup_memvarAnalysiscLcLCalibrationDataInterfaceBase(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBase));
   { Analysis::CalibrationDataInterfaceBase *p; p=(Analysis::CalibrationDataInterfaceBase*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBasecLcLvariableType),-1,-2,1,G__FastAllocString(2048).Format("kEta=%lldLL",(long long)Analysis::CalibrationDataInterfaceBase::kEta).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBasecLcLvariableType),-1,-2,1,G__FastAllocString(2048).Format("kAbsEta=%lldLL",(long long)Analysis::CalibrationDataInterfaceBase::kAbsEta).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBasecLcLvariableType),-1,-2,1,G__FastAllocString(2048).Format("kPt=%lldLL",(long long)Analysis::CalibrationDataInterfaceBase::kPt).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),G__defined_typename("map<std::string,std::vector<int> >"),-1,4,"m_functionArguments=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),G__defined_typename("map<std::string,std::string>"),-1,4,"m_calibrationEffNames=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),G__defined_typename("map<std::string,std::string>"),-1,4,"m_calibrationSFNames=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_string),-1,-1,2,"m_taggerName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,2,"m_operatingPoints=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Analysis::CalibrationDataVariables */
static void G__setup_memvarAnalysiscLcLCalibrationDataVariables(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataVariables));
   { Analysis::CalibrationDataVariables *p; p=(Analysis::CalibrationDataVariables*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->jetAuthor)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_string),-1,-1,1,"jetAuthor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetPt)-(long)(p)),100,0,0,-1,-1,-1,1,"jetPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->jetEta)-(long)(p)),100,0,0,-1,-1,-1,1,"jetEta=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Analysis::CalibrationDataInterfaceROOT */
static void G__setup_memvarAnalysiscLcLCalibrationDataInterfaceROOT(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT));
   { Analysis::CalibrationDataInterfaceROOT *p; p=(Analysis::CalibrationDataInterfaceROOT*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TFile),-1,-1,4,"m_fileEff=",0,"! Do not attempt to persistify (PROOF)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TFile),-1,-1,4,"m_fileSF=",0,"! Do not attempt to persistify (PROOF)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),G__defined_typename("map<std::string,std::string>"),-1,4,"m_aliases=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_maplEstringcOTObjectmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjectmUgRsPgRsPgR),G__defined_typename("map<std::string,TObject*>"),-1,4,"m_objects=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarCalibrationDataInterface_Dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncAnalysis(void) {
   /* Analysis */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_Analysis));
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAnalysiscLcLCalibrationDataInterfaceBase(void) {
   /* Analysis::CalibrationDataInterfaceBase */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBase));
   G__memfunc_setup("EffCalibrationName",1786,G__CalibrationDataInterface_Dict_442_0_2, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_string), -1, 1, 1, 1, 1, 9, "u 'string' - 11 - flavour", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEffCalibrationNames",2233,G__CalibrationDataInterface_Dict_442_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,string,less<string>,allocator<pair<const string,string> > >' 'map<std::string,std::string>' 11 - names", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SFCalibrationName",1666,G__CalibrationDataInterface_Dict_442_0_4, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_string), -1, 1, 1, 1, 1, 9, "u 'string' - 11 - flavour", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSFCalibrationNames",2113,G__CalibrationDataInterface_Dict_442_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,string,less<string>,allocator<pair<const string,string> > >' 'map<std::string,std::string>' 11 - names", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("functionArguments",1820,G__CalibrationDataInterface_Dict_442_0_6, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 1, 1, 1, 1, 9, "u 'string' - 11 - object", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("existFunctionArguments",2345,G__CalibrationDataInterface_Dict_442_0_7, 103, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 11 - object", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("parametricVariance",1873,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 3, 1, 4, 8, 
"U 'TF1' - 0 - fct U 'TMatrixTSym<double>' 'TMatrixDSym' 10 - cov "
"D - 'Double_t' 10 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBasename",1116,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_string), -1, 0, 4, 1, 2, 8, 
"u 'string' - 11 - OP u 'string' - 11 - flavour "
"u 'string' - 11 '\"\"' extra g - - 0 'true' SF", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getResults",1074,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR), G__defined_typename("Analysis::CalibResult"), 0, 5, 1, 2, 8, 
"D - 'Double_t' 10 - x D - 'Double_t' 10 - xsyst "
"U 'TF1' - 0 - fct U 'TF1' - 0 - fctsys "
"U 'TMatrixTSym<double>' 'TMatrixDSym' 10 - cov", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("computeFunctionArguments",2553,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 8, 
"u 'string' - 11 - object C - - 10 - ctitle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibrationDataInterface_Dict_442_0_12, 85, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Analysis::CalibrationDataInterfaceBase::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibrationDataInterface_Dict_442_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataInterfaceBase::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibrationDataInterface_Dict_442_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Analysis::CalibrationDataInterfaceBase::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibrationDataInterface_Dict_442_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Analysis::CalibrationDataInterfaceBase::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibrationDataInterface_Dict_442_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibrationDataInterface_Dict_442_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataInterfaceBase::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibrationDataInterface_Dict_442_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Analysis::CalibrationDataInterfaceBase::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibrationDataInterface_Dict_442_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataInterfaceBase::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibrationDataInterface_Dict_442_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Analysis::CalibrationDataInterfaceBase::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~CalibrationDataInterfaceBase", 2924, G__CalibrationDataInterface_Dict_442_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 3);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CalibrationDataInterface_Dict_442_0_25, (int) ('u'), G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBase), -1, 1, 1, 1, 1, 0, "u 'Analysis::CalibrationDataInterfaceBase' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAnalysiscLcLCalibrationDataVariables(void) {
   /* Analysis::CalibrationDataVariables */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataVariables));
   // automatic default constructor
   G__memfunc_setup("CalibrationDataVariables", 2427, G__CalibrationDataInterface_Dict_467_0_1, (int) ('i'), G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataVariables), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("CalibrationDataVariables", 2427, G__CalibrationDataInterface_Dict_467_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataVariables), -1, 0, 1, 1, 1, 0, "u 'Analysis::CalibrationDataVariables' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CalibrationDataVariables", 2553, G__CalibrationDataInterface_Dict_467_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CalibrationDataInterface_Dict_467_0_4, (int) ('u'), G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataVariables), -1, 1, 1, 1, 1, 0, "u 'Analysis::CalibrationDataVariables' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAnalysiscLcLCalibrationDataInterfaceROOT(void) {
   /* Analysis::CalibrationDataInterfaceROOT */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT));
   G__memfunc_setup("CalibrationDataInterfaceROOT",2743,G__CalibrationDataInterface_Dict_469_0_1, 105, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT), -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - taggerName u 'string' - 0 '\"BTagCalibration.env\"' configname "
"u 'string' - 0 '\"\"' pathname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibrationDataInterfaceROOT",2743,G__CalibrationDataInterface_Dict_469_0_2, 105, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEfficiency",1333,G__CalibrationDataInterface_Dict_469_0_3, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR), G__defined_typename("Analysis::CalibResult"), 0, 4, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - variables u 'string' - 11 - label "
"u 'string' - 11 - OP i 'Analysis::Uncertainty' - 0 'None' unc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMCEfficiency",1477,G__CalibrationDataInterface_Dict_469_0_4, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR), G__defined_typename("Analysis::CalibResult"), 0, 4, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - variables u 'string' - 11 - label "
"u 'string' - 11 - OP i 'Analysis::Uncertainty' - 0 'None' unc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getScaleFactor",1415,G__CalibrationDataInterface_Dict_469_0_5, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR), G__defined_typename("Analysis::CalibResult"), 0, 4, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - variables u 'string' - 11 - label "
"u 'string' - 11 - OP i 'Analysis::Uncertainty' - 0 'None' unc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInefficiencyScaleFactor",2643,G__CalibrationDataInterface_Dict_469_0_6, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR), G__defined_typename("Analysis::CalibResult"), 0, 4, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - variables u 'string' - 11 - label "
"u 'string' - 11 - OP i 'Analysis::Uncertainty' - 0 'None' unc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInefficiency",1548,G__CalibrationDataInterface_Dict_469_0_7, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR), G__defined_typename("Analysis::CalibResult"), 0, 4, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - variables u 'string' - 11 - label "
"u 'string' - 11 - OP i 'Analysis::Uncertainty' - 0 'None' unc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMCInefficiency",1692,G__CalibrationDataInterface_Dict_469_0_8, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR), G__defined_typename("Analysis::CalibResult"), 0, 4, 1, 1, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - variables u 'string' - 11 - label "
"u 'string' - 11 - OP i 'Analysis::Uncertainty' - 0 'None' unc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initialize",1074,G__CalibrationDataInterface_Dict_469_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - jetauthor u 'string' - 11 - OP "
"i 'Analysis::Uncertainty' - 0 - unc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("retrieveFunctionArguments",2658,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 8, 
"u 'Analysis::CalibrationDataVariables' - 11 - variables u 'string' - 11 - object "
"D - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("retrieveTObject",1553,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TObject), -1, 0, 2, 1, 4, 8, 
"u 'string' - 11 - name g - - 0 - eff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAlias",810,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_string), -1, 0, 1, 1, 4, 8, "u 'string' - 11 - author", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fullName",820,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_string), -1, 0, 2, 1, 4, 8, 
"u 'string' - 11 - author u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibrationDataInterface_Dict_469_0_14, 85, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Analysis::CalibrationDataInterfaceROOT::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibrationDataInterface_Dict_469_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataInterfaceROOT::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibrationDataInterface_Dict_469_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Analysis::CalibrationDataInterfaceROOT::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibrationDataInterface_Dict_469_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Analysis::CalibrationDataInterfaceROOT::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibrationDataInterface_Dict_469_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibrationDataInterface_Dict_469_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataInterfaceROOT::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibrationDataInterface_Dict_469_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Analysis::CalibrationDataInterfaceROOT::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibrationDataInterface_Dict_469_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Analysis::CalibrationDataInterfaceROOT::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibrationDataInterface_Dict_469_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Analysis::CalibrationDataInterfaceROOT::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("CalibrationDataInterfaceROOT", 2743, G__CalibrationDataInterface_Dict_469_0_26, (int) ('i'), 
G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT), -1, 0, 1, 1, 1, 0, "u 'Analysis::CalibrationDataInterfaceROOT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CalibrationDataInterfaceROOT", 2869, G__CalibrationDataInterface_Dict_469_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CalibrationDataInterface_Dict_469_0_28, (int) ('u'), G__get_linked_tagnum(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT), -1, 1, 1, 1, 1, 0, "u 'Analysis::CalibrationDataInterfaceROOT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncCalibrationDataInterface_Dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalCalibrationDataInterface_Dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcCalibrationDataInterface_Dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__CalibrationDataInterface_DictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTSymlEdoublegR = { "TMatrixTSym<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR = { "pair<double,double>" , 115 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_Analysis = { "Analysis" , 110 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBase = { "Analysis::CalibrationDataInterfaceBase" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR = { "map<string,string,less<string>,allocator<pair<const string,string> > >" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBasecLcLvariableType = { "Analysis::CalibrationDataInterfaceBase::variableType" , 101 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR = { "map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataVariables = { "Analysis::CalibrationDataVariables" , 115 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_AnalysiscLcLUncertainty = { "Analysis::Uncertainty" , 101 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT = { "Analysis::CalibrationDataInterfaceROOT" , 99 , -1 };
G__linked_taginfo G__CalibrationDataInterface_DictLN_maplEstringcOTObjectmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjectmUgRsPgRsPgR = { "map<string,TObject*,less<string>,allocator<pair<const string,TObject*> > >" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableCalibrationDataInterface_Dict() {
  G__CalibrationDataInterface_DictLN_TClass.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TBuffer.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMemberInspector.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TObject.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TNamed.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_string.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTSymlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TF1.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_Analysis.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBase.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBasecLcLvariableType.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_TFile.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataVariables.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_AnalysiscLcLUncertainty.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT.tagnum = -1 ;
  G__CalibrationDataInterface_DictLN_maplEstringcOTObjectmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjectmUgRsPgRsPgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableCalibrationDataInterface_Dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TClass);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TObject);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_string);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTSymlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TMatrixTSparseDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_pairlEdoublecOdoublegR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TF1);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_Analysis),0,-1,0,(char*)NULL,G__setup_memvarAnalysis,G__setup_memfuncAnalysis);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBase),sizeof(Analysis::CalibrationDataInterfaceBase),-1,62721,(char*)NULL,G__setup_memvarAnalysiscLcLCalibrationDataInterfaceBase,G__setup_memfuncAnalysiscLcLCalibrationDataInterfaceBase);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceBasecLcLvariableType);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_TFile);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataVariables),sizeof(Analysis::CalibrationDataVariables),-1,0,(char*)NULL,G__setup_memvarAnalysiscLcLCalibrationDataVariables,G__setup_memfuncAnalysiscLcLCalibrationDataVariables);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_AnalysiscLcLUncertainty);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_AnalysiscLcLCalibrationDataInterfaceROOT),sizeof(Analysis::CalibrationDataInterfaceROOT),-1,62720,(char*)NULL,G__setup_memvarAnalysiscLcLCalibrationDataInterfaceROOT,G__setup_memfuncAnalysiscLcLCalibrationDataInterfaceROOT);
   G__get_linked_tagnum_fwd(&G__CalibrationDataInterface_DictLN_maplEstringcOTObjectmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjectmUgRsPgRsPgR);
}
extern "C" void G__cpp_setupCalibrationDataInterface_Dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupCalibrationDataInterface_Dict()");
  G__set_cpp_environmentCalibrationDataInterface_Dict();
  G__cpp_setup_tagtableCalibrationDataInterface_Dict();

  G__cpp_setup_inheritanceCalibrationDataInterface_Dict();

  G__cpp_setup_typetableCalibrationDataInterface_Dict();

  G__cpp_setup_memvarCalibrationDataInterface_Dict();

  G__cpp_setup_memfuncCalibrationDataInterface_Dict();
  G__cpp_setup_globalCalibrationDataInterface_Dict();
  G__cpp_setup_funcCalibrationDataInterface_Dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncCalibrationDataInterface_Dict();
  return;
}
class G__cpp_setup_initCalibrationDataInterface_Dict {
  public:
    G__cpp_setup_initCalibrationDataInterface_Dict() { G__add_setup_func("CalibrationDataInterface_Dict",(G__incsetup)(&G__cpp_setupCalibrationDataInterface_Dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initCalibrationDataInterface_Dict() { G__remove_setup_func("CalibrationDataInterface_Dict"); }
};
G__cpp_setup_initCalibrationDataInterface_Dict G__cpp_setup_initializerCalibrationDataInterface_Dict;

